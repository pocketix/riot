# ----- SD types and instances -----

enum SDParameterType {
  STRING
  NUMBER
  BOOLEAN
}

type SDParameter {
  id: ID!
  denotation: String!
  label: String
  type: SDParameterType!
  parameterSnapshots: [SDParameterSnapshot!]!
}

type SDType {
  id: ID!
  denotation: String!
  label: String
  icon: String
  parameters: [SDParameter!]!
  commands: [SDCommand!]!
}

input SDParameterInput {
  denotation: String!
  label: String
  type: SDParameterType!
}

input SDTypeInput {
  denotation: String!
  label: String
  icon: String
  parameters: [SDParameterInput!]!
  commands: [SDCommandInputWithoutType!]
}

input SDCommandInputWithoutType {
  name: String!
  payload: String!
}

type SDCommand {
  id: ID!
  name: String!
  payload: String!
  sdTypeId: ID!
}

input SDCommandInput {
  name: String!
  payload: String!
  sdTypeId: ID!
}

type SDCommandInvocation {
  id: ID!
  invocationTime: String!
  payload: String!
  userId: ID!
  commandId: ID!
  sdInstanceId: ID!
}

type SDInstance {
  id: ID!
  uid: String!
  confirmedByUser: Boolean!
  userIdentifier: String!
  type: SDType!
  parameterSnapshots: [SDParameterSnapshot!]
  commandInvocations: [SDCommandInvocation!]!
}

input SDInstanceUpdateInput {
  userIdentifier: String
  confirmedByUser: Boolean
}

type SDParameterSnapshot {
  instanceId:  ID!
  parameterId: ID!
  string:      String
  number:      Float
  boolean:     Boolean
  updatedAt:   Date!
  vplPrograms: [ID!]!
}

input SDCommandInvocationInput {
  invocationTime: String!
  payload: String!
  userId: ID!
  commandId: ID!
  sdInstanceId: ID!
}

# ----- KPI definitions and nodes -----

enum SDInstanceMode {
  ALL
  SELECTED
}

type KPIDefinition {
  id: ID!
  sdTypeID: ID!
  sdTypeSpecification: String!
  userIdentifier: String!
  nodes: [KPINode!]!
  sdInstanceMode: SDInstanceMode!
  selectedSDInstanceUIDs: [String!]!
}

interface KPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
}

enum LogicalOperationType {
  AND
  OR
  NOR
}

type LogicalOperationKPINode implements KPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  type: LogicalOperationType!
}

interface AtomKPINode implements KPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
}

type StringEQAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  stringReferenceValue: String!
}

type BooleanEQAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  booleanReferenceValue: Boolean!
}

type NumericEQAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  numericReferenceValue: Float!
}

type NumericGTAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  numericReferenceValue: Float!
}

type NumericGEQAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  numericReferenceValue: Float!
}

type NumericLTAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  numericReferenceValue: Float!
}

type NumericLEQAtomKPINode implements KPINode & AtomKPINode {
  id: ID!
  parentNodeID: ID
  nodeType: KPINodeType!
  sdParameterID: ID!
  sdParameterSpecification: String!
  numericReferenceValue: Float!
}

input KPIDefinitionInput {
  sdTypeID: ID!
  sdTypeSpecification: String!
  userIdentifier: String!
  nodes: [KPINodeInput!]!
  sdInstanceMode: SDInstanceMode!
  selectedSDInstanceUIDs: [String!]!
}

enum KPINodeType {
  StringEQAtom,
  BooleanEQAtom,
  NumericEQAtom,
  NumericGTAtom,
  NumericGEQAtom,
  NumericLTAtom,
  NumericLEQAtom,
  LogicalOperation
}

input KPINodeInput {
  type: KPINodeType!
  id: ID!
  parentNodeID: ID
  sdParameterID: ID
  sdParameterSpecification: String
  stringReferenceValue: String
  booleanReferenceValue: Boolean
  numericReferenceValue: Float
  logicalOperationType: LogicalOperationType
}

# ----- KPI fulfillment check results -----

type KPIFulfillmentCheckResult {
  kpiDefinitionID: ID!
  sdInstanceID: ID!
  fulfilled: Boolean!
}

type KPIFulfillmentCheckResultTuple {
  kpiFulfillmentCheckResults: [KPIFulfillmentCheckResult!]!
}

# ----- SD instance groups -----

type SDInstanceGroup {
  id: ID!
  userIdentifier: String!
  sdInstanceIDs: [ID!]!
}

input SDInstanceGroupInput {
  userIdentifier: String!
  sdInstanceIDs: [ID!]!
}

# ----- Statistics

scalar Date

input SimpleSensors {
  sensors: [String!]!
}

input SensorsWithFields {
  sensors: [SensorField!]!
}

input SensorField {
  key: String!
  values: [String!]!
}

enum StatisticsOperation {
  mean
  min
  max
  first
  sum
  last
  none
  count
  integral
  median
  mode
  quantile
  reduce
  skew
  spread
  stddev
  timeweightedavg
}

"""
Data used for querying the selected bucket
"""
input StatisticsInput {
  """
  Start of the querying window
  """
  from: Date
  """
  End of the querying window
  """
  to: Date
  """
  Amount of minutes to aggregate by
  For example if the queried range has 1 hour and aggregateMinutes is set to 10 the aggregation will result in 6 points
  """
  aggregateMinutes: Int
  """
  Timezone override default UTC.
  For more details why and how this affects queries see: https://www.influxdata.com/blog/time-zones-in-flux/.
  In most cases you can ignore this and some edge aggregations can be influenced.
  If you need a precise result or the aggregation uses high amount of minutes provide the target time zone.
  """
  timezone: String
  """
  Aggregation operator to use, if needed
  """
  operation: StatisticsOperation
}


scalar JSON

type OutputData {
  time: Date!
  deviceId: String!
  deviceType: String
  data: JSON!
}

input InputData {
  time: Date!
  deviceId: String!
  deviceType: String
  data: JSON!
}


# ----- Users and their configurations ----

type UserConfig {
  userId: ID!
  config: JSON!
}

input UserConfigInput {
  config: JSON!
}

# ----- VPL Programs -----

type VPLProgram {
    id: ID!
    name: String!
    data: JSON!
    lastRun: String
    enabled: Boolean!
    sdParameterSnapshots: [SDParameterSnapshot!]!
}

type VPLProgramExecutionResult {
    program: VPLProgram!
    sdParameterSnapshotsToUpdate: [SDParameterSnapshot!]!
    SdCommandInvocations: [SDCommandInvocation!]!
    executionTime: String!
    enabled: Boolean!
    success: Boolean!
    error: String
    executionReason: String
}

# ----- VPL Procedures -----

type VPLProcedure {

    id: ID!
    name: String!
    data: JSON!
    createdAt: Date!
    updatedAt: Date!
}

input VPLProcedureInput {
    name: String!
    data: JSON!
}

# ----- Queries, mutations and subscriptions -----

type Query {
  sdType(id: ID!): SDType!
  sdTypes: [SDType!]!
  sdInstances: [SDInstance!]!
  kpiDefinition(id: ID!): KPIDefinition!
  kpiDefinitions: [KPIDefinition!]!
  kpiFulfillmentCheckResults: [KPIFulfillmentCheckResult!]!
  sdInstanceGroup(id: ID!): SDInstanceGroup!
  sdInstanceGroups: [SDInstanceGroup!]!
  statisticsQuerySimpleSensors(request: StatisticsInput sensors: SimpleSensors!): [OutputData!]!
  statisticsQuerySensorsWithFields(request: StatisticsInput sensors: SensorsWithFields!): [OutputData!]!
  userConfig(id: ID!): UserConfig!
  myUserConfig: UserConfig!
  sdCommand(id: ID!): SDCommand! # Returns a specific SDCommand by its ID
  sdCommands: [SDCommand!]! # Returns all SDCommands
  sdCommandInvocation(id: ID!): SDCommandInvocation! # Returns a specific SDCommandInvocation
  sdCommandInvocations: [SDCommandInvocation!]! # Returns all SDCommandInvocations
  vplPrograms: [VPLProgram!]! # Returns all VPLPrograms
  vplProgram(id: ID!): VPLProgram! # Returns a specific VPLProgram by its ID
  vplProcedure(id: ID!): VPLProcedure! # Returns a specific VPLProcedure by its ID
  vplProcedures: [VPLProcedure!]! # Returns all VPLProcedures
}

type Mutation {
  createSDType(input: SDTypeInput!): SDType!
  deleteSDType(id: ID!): Boolean!
  updateSDType(id: ID!, input: SDTypeInput!): SDType!
  updateSDInstance(id: ID!, input: SDInstanceUpdateInput!): SDInstance!
  createKPIDefinition(input: KPIDefinitionInput!): KPIDefinition!
  updateKPIDefinition(id: ID!, input: KPIDefinitionInput!): KPIDefinition!
  deleteKPIDefinition(id: ID!): Boolean!
  createSDInstanceGroup(input: SDInstanceGroupInput!): SDInstanceGroup!
  updateSDInstanceGroup(id: ID!, input: SDInstanceGroupInput!): SDInstanceGroup!
  deleteSDInstanceGroup(id: ID!): Boolean!
  statisticsMutate(inputData: InputData!): Boolean!
  updateUserConfig(userId: ID!, input: UserConfigInput!): UserConfig!
  deleteUserConfig(userId: ID!): Boolean!
  createSDCommand(input: SDCommandInput!): SDCommand! # Creating a command
  updateSDCommand(id: ID!, name: String, payload: String): SDCommand! # Updating a command
  deleteSDCommand(id: ID!): Boolean! # Deleting a command
  createSDCommandInvocation(input: SDCommandInvocationInput!): SDCommandInvocation! # Creating an invocation
  invokeSDCommand(id: ID!): Boolean! # Starting an existing invocation
  createVPLProgram(name: String!, data: JSON!): VPLProgram!
  updateVPLProgram(id: ID!, name: String!, data: JSON!): VPLProgram!
  deleteVPLProgram(id: ID!): Boolean!
  executeVPLProgram(id: ID!): VPLProgramExecutionResult!
  createVPLProcedure(input: VPLProcedureInput!): VPLProcedure! # Creating a procedure
  updateVPLProcedure(id: ID!, input: VPLProcedureInput!): VPLProcedure! # Updating a procedure
  deleteVPLProcedure(id: ID!): Boolean! # Deleting a procedure
}

type Subscription {
  onSDInstanceRegistered: SDInstance!
  onKPIFulfillmentChecked: KPIFulfillmentCheckResultTuple!
  onSDParameterSnapshotUpdate: SDParameterSnapshot!
  commandInvocationStateChanged: SDCommandInvocation! # Subscription for command state changes
}
